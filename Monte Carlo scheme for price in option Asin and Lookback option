<h1 align="center">CQF Exam 2</h1> 
<h3 align="center">Jingting Zhan</h3> 
<h3 align="center">2024/09/18</h3> 
# Abstract 
The report presents the Monte Carlo scheme for price in option Asin and Lookback option. Euler-Maruyama scheme to predict and simulate the stock price. This report does the different sticker prices and volatility to analyse the effect on option price. This report contains several more fixed prices and compares them in detail. <p>
    Key word: Asian option, Lookback option,  Euler-Maruyama scheme, simulatation
# introduction 

Option is a financial  trading contract that we can have the right to buy or see the stock in a day and see the price for that day. For the trading on the option, it only depends on there ending price, but the Asian Option and Lookback option have some different function to decide the option price. 
For the Asian option, it reduces the sensitivity to extreme prices from calculated their average price during the lifetime. It is a good method to avoid high risk but might not get giant profit sometimes. Also in the Lookback Options, it is really a good way to see the trading for an option from their history treading map. It calculated the history treading hight and goals. <p>
    Regarding the option methods  that we have, the Montro Calor simulation will work well for the Euler-Maruyama method. We all accept that the simulation will be the wildest use for simulation options and stocks for all over the world. 


# Methodology
To value Asian and lookback options, we use a Monte Carlo simulation approach that generates a large number of possible future price paths for the underlying asset. For  all the simulation stuffs, they are under the risk-neutral condition to run the test. <p>
For the Option simulation method we use, we can use the function as:<P>
    $dS_t=rS_tdt+\sigma S_tdW_t$<p>
    Then we do the Euler-Maruyama scheme to do the time describe as: 
    $S_{t+t'}=S_t(1+rt'+\sigma\sqrt t'Z_t)$ Where $Z_t$ as the stander random variable.<p>
### Payoff function for the Asian and Lookback Option 
Asian Optio can do the payoff is based on the average price of the underlying asset over the contract's lifetime, then the Lookback Option can be the payoff is determined by the maximum price of the underlying asset over the contract period.
import numpy as np
from pydantic import BaseModel, Field
from typing import Literal
from scipy.stats import norm
import matplotlib.pyplot as plt
        class OptionInputs(BaseModel):
    option_type: Literal["call", "put"]
    spot_price: float = Field(gt=0, description="current price")
    strike_price: float = Field(gt=0, description="Strike price")
    time_to_expiry: float = Field(gt=0, description="time to expiration in years")
    risk_free_rate: float = Field(ge=0, le=1, description="Risk-free rate")
    volatility: float = Field(gt=0, description="volatility")
class BlackScholesModel(BaseModel):
    inputs: OptionInputs

    @property
    def d1(self) -> float:
        return (np.log(self.inputs.spot_price / self.inputs.strike_price) +
                (self.inputs.risk_free_rate + 0.5 * self.inputs.volatility ** 2) * self.inputs.time_to_expiry) / \
               (self.inputs.volatility * np.sqrt(self.inputs.time_to_expiry))

    @property
    def d2(self) -> float:
        return self.d1 - self.inputs.volatility * np.sqrt(self.inputs.time_to_expiry)

    @property
    def price(self) -> float:
        if self.inputs.option_type == "call":
            return self.inputs.spot_price * norm.cdf(self.d1) - \
                   self.inputs.strike_price * np.exp(-self.inputs.risk_free_rate * self.inputs.time_to_expiry) * norm.cdf(self.d2)
        else:  # put option
            return self.inputs.strike_price * np.exp(-self.inputs.risk_free_rate * self.inputs.time_to_expiry) * norm.cdf(-self.d2) - \
                   self.inputs.spot_price * norm.cdf(-self.d1)

    @property
    def delta(self) -> float:
        if self.inputs.option_type == "call":
            return norm.cdf(self.d1)
        else:  # put option
            return norm.cdf(self.d1) - 1

    @property
    def gamma(self) -> float:
        return norm.pdf(self.d1) / (self.inputs.spot_price * self.inputs.volatility * np.sqrt(self.inputs.time_to_expiry))

    @property
    def vega(self) -> float:
        return self.inputs.spot_price * norm.pdf(self.d1) * np.sqrt(self.inputs.time_to_expiry) / 100

    @property
    def theta(self) -> float:
        common = -(self.inputs.spot_price * norm.pdf(self.d1) * self.inputs.volatility) / (2 * np.sqrt(self.inputs.time_to_expiry))
        if self.inputs.option_type == "call":
            return (common - self.inputs.risk_free_rate * self.inputs.strike_price *
                    np.exp(-self.inputs.risk_free_rate * self.inputs.time_to_expiry) * norm.cdf(self.d2)) / 365
        else:  # put option
            return (common + self.inputs.risk_free_rate * self.inputs.strike_price *
                    np.exp(-self.inputs.risk_free_rate * self.inputs.time_to_expiry) * norm.cdf(-self.d2)) / 365

    @property
    def rho(self) -> float:
        if self.inputs.option_type == "call":
            return self.inputs.strike_price * self.inputs.time_to_expiry * \
                   np.exp(-self.inputs.risk_free_rate * self.inputs.time_to_expiry) * norm.cdf(self.d2) / 100
        else:  # put option
            return -self.inputs.strike_price * self.inputs.time_to_expiry * \
                   np.exp(-self.inputs.risk_free_rate * self.inputs.time_to_expiry) * norm.cdf(-self.d2) / 100

#contain the method and caculate the option with the certern price
# it will recive the necessary parmeter for calcuations 
def run_black_scholes_multiple_strikes(option_type, spot_price, time_to_expiry, risk_free_rate, volatility, strike_prices):
    results = []
    
    for strike in strike_prices:
        option_inputs = OptionInputs(
            option_type=option_type,
            spot_price=spot_price,
            strike_price=strike,
            time_to_expiry=time_to_expiry,
            risk_free_rate=risk_free_rate,
            volatility=volatility
        )
        
        model = BlackScholesModel(inputs=option_inputs)
        
        results.append({
            'Strike Price': strike,
            'Price': model.price,
            'Delta': model.delta,
            'Gamma': model.gamma,
            'Vega': model.vega,
            'Theta': model.theta,
            'Rho': model.rho
        })
    
    return results
        def plot_results(results, title):
    strike_prices = [res['Strike Price'] for res in results]
    prices = [res['Price'] for res in results]
    
    plt.plot(strike_prices, prices, marker='o', label='Option Price')
    plt.xlabel('Strike Price')
    plt.ylabel('Option Price')
    plt.title(title)
    plt.grid(True)
    plt.show()

def main():
    option_type = "call" 
    spot_price = 100
    time_to_expiry = 1
    risk_free_rate = 0.05 
    volatility = 0.2  

    strike_prices = [80, 90, 100, 110, 120, 130, 140, 150]
    
    results = run_black_scholes_multiple_strikes(option_type, spot_price, time_to_expiry, risk_free_rate, volatility, strike_prices)
    
    print("Strike Price | Price | Delta | Gamma | Vega | Theta | Rho")
    print("----------------------------------------------------------")
    for res in results:
        print(f"{res['Strike Price']:11} | {res['Price']:.2f} | {res['Delta']:.4f} | {res['Gamma']:.6f} | {res['Vega']:.6f} | {res['Theta']:.6f} | {res['Rho']:.6f}")
    plot_results(results, 'Black-Scholes Option Prices vs Strike Prices')

if __name__ == "__main__":
    main()
              import numpy as np
import matplotlib.pyplot as plt

def simulate_stock_price(S0, r, sigma, T, N, M):
    dt = T / N  
    S = np.zeros((M, N+1))  
    S[:, 0] = S0  
    for t in range(1, N+1):
        Z = np.random.standard_normal(M)  
        S[:, t] = S[:, t-1] * np.exp((r - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * Z)
    return S
def asian_option_payoff(S, E):
    average_price = np.mean(S[:, 1:], axis=1)  
    return np.maximum(average_price - E, 0)
def lookback_fixed_call_payoff(S, E):
    max_price = np.max(S[:, 1:], axis=1)
    return np.maximum(max_price - E, 0)
def lookback_floating_call_payoff(S):
    min_price = np.min(S[:, 1:], axis=1)
    return np.maximum(S[:, -1] - min_price, 0)
def lookback_fixed_put_payoff(S, E):
    max_price = np.max(S[:, 1:], axis=1)
    return np.maximum(E - max_price, 0)
S0 = 100      
E = 100        
T = 1.0       
r = 0.05      
sigma = 0.2   
N = 252      
M = 10000     

S = simulate_stock_price(S0, r, sigma, T, N, M)

asian_payoffs = asian_option_payoff(S, E)
lookback_fixed_call_payoffs = lookback_fixed_call_payoff(S, E)
lookback_floating_call_payoffs = lookback_floating_call_payoff(S)
lookback_fixed_put_payoffs = lookback_fixed_put_payoff(S, E)

asian_price = np.exp(-r * T) * np.mean(asian_payoffs)
lookback_fixed_call_price = np.exp(-r * T) * np.mean(lookback_fixed_call_payoffs)
lookback_floating_call_price = np.exp(-r * T) * np.mean(lookback_floating_call_payoffs)
lookback_fixed_put_price = np.exp(-r * T) * np.mean(lookback_fixed_put_payoffs)

print(f"Asian Option Price: {asian_price:.2f}")
print(f"Lookback Fixed Strike Call Price: {lookback_fixed_call_price:.2f}")
print(f"Lookback Floating Strike Call Price: {lookback_floating_call_price:.2f}")
print(f"Lookback Fixed Strike Put Price: {lookback_fixed_put_price:.2f}")

plt.plot(S[:10].T)
plt.title("Sample Stock Price Paths")
plt.xlabel("Time Steps (days)")
plt.ylabel("Stock Price")
plt.show()
def asian_arithmetic_payoff(S, E, option_type="call"):
    average_price = np.mean(S[:, 1:], axis=1) 
    if option_type == "call":
        return np.maximum(average_price - E, 0)
    elif option_type == "put":
        return np.maximum(E - average_price, 0)
def asian_geometric_payoff(S, E, option_type="call"):
    geometric_average_price = np.exp(np.mean(np.log(S[:, 1:]), axis=1))
    if option_type == "call":
        return np.maximum(geometric_average_price - E, 0)
    elif option_type == "put":
        return np.maximum(E - geometric_average_price, 0)

def lookback_fixed_call(S, E):
    max_price = np.max(S[:, 1:], axis=1)
    return np.maximum(max_price - E, 0)

def lookback_floating_call(S):
    min_price = np.min(S[:, 1:], axis=1)
    return np.maximum(S[:, -1] - min_price, 0)

def lookback_fixed_put(S, E):
    max_price = np.max(S[:, 1:], axis=1)
    return np.maximum(E - max_price, 0)

def lookback_floating_put(S):
    max_price = np.max(S[:, 1:], axis=1)
    return np.maximum(max_price - S[:, -1], 0)
S0 = 100      
E = 100        
T = 1.0       
r = 0.05      
sigma = 0.2   
N = 252      
M = 10000 
strike_prices = np.arange(80, 150, 10)

S = simulate_stock_price(S0, r, sigma, T, N, M)
option_results = { 
    "Fixed Strike Arithmetic Asian Call": [],
    "Fixed Strike Arithmetic Asian Put": [],
    "Fixed Strike Geometric Asian Call": [],
    "Fixed Strike Geometric Asian Put": [],
    "Floating Strike Arithmetic Asian Call": [],
    "Floating Strike Arithmetic Asian Put": [],
    "Floating Strike Geometric Asian Call": [],
    "Floating Strike Geometric Asian Put": [],
    "Fixed Strike Lookback Call": [],
    "Fixed Strike Lookback Put": [],
    "Floating Strike Lookback Call": [],
    "Floating Strike Lookback Put": []
}


for E in strike_prices:

    option_results["Fixed Strike Arithmetic Asian Call"].append(np.exp(-r * T) * np.mean(asian_arithmetic_payoff(S, E, "call")))
    option_results["Fixed Strike Arithmetic Asian Put"].append(np.exp(-r * T) * np.mean(asian_arithmetic_payoff(S, E, "put")))
    option_results["Fixed Strike Geometric Asian Call"].append(np.exp(-r * T) * np.mean(asian_geometric_payoff(S, E, "call")))
    option_results["Fixed Strike Geometric Asian Put"].append(np.exp(-r * T) * np.mean(asian_geometric_payoff(S, E, "put")))

    # Floating strike Asian options 
    option_results["Floating Strike Arithmetic Asian Call"].append(np.exp(-r * T) * np.mean(asian_arithmetic_payoff(S, S[:, -1], "call")))
    option_results["Floating Strike Arithmetic Asian Put"].append(np.exp(-r * T) * np.mean(asian_arithmetic_payoff(S, S[:, -1], "put")))
    option_results["Floating Strike Geometric Asian Call"].append(np.exp(-r * T) * np.mean(asian_geometric_payoff(S, S[:, -1], "call")))
    option_results["Floating Strike Geometric Asian Put"].append(np.exp(-r * T) * np.mean(asian_geometric_payoff(S, S[:, -1], "put")))

    # Lookback options
    option_results["Fixed Strike Lookback Call"].append(np.exp(-r * T) * np.mean(lookback_fixed_call(S, E)))
    option_results["Fixed Strike Lookback Put"].append(np.exp(-r * T) * np.mean(lookback_fixed_put(S, E)))
    option_results["Floating Strike Lookback Call"].append(np.exp(-r * T) * np.mean(lookback_floating_call(S)))
    option_results["Floating Strike Lookback Put"].append(np.exp(-r * T) * np.mean(lookback_floating_put(S)))

plt.figure(figsize=(10, 6))
for label, values in option_results.items():
    plt.plot(strike_prices, values, label=label)

plt.title("Option Prices for Different Exotic Options")
plt.xlabel("Strike Price")
plt.ylabel("Option Price")
plt.legend(loc="best", fontsize="small", bbox_to_anchor=(1.05, 1), borderaxespad=0.)
plt.grid(True)
plt.show()
import numpy as np
import matplotlib.pyplot as plt

def simulate_stock_price(S0, r, sigma, T, N, M):
    dt = T / N  
    S = np.zeros((M, N+1))  
    S[:, 0] = S0  
    for t in range(1, N+1):
        Z = np.random.standard_normal(M)  
        S[:, t] = S[:, t-1] * np.exp((r - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * Z)
    return S
def asian_option_payoff(S, E):
    average_price = np.mean(S[:, 1:], axis=1)  
    return np.maximum(average_price - E, 0)
def lookback_fixed_call_payoff(S, E):
    max_price = np.max(S[:, 1:], axis=1)
    return np.maximum(max_price - E, 0)
def lookback_floating_call_payoff(S):
    min_price = np.min(S[:, 1:], axis=1)
    return np.maximum(S[:, -1] - min_price, 0)
def lookback_fixed_put_payoff(S, E):
    max_price = np.max(S[:, 1:], axis=1)
    return np.maximum(E - max_price, 0)
S0 = 100      
E = 100        
T = 1.0       
r = 0.05      
sigma = 0.02  
N = 252      
M = 10000     

S = simulate_stock_price(S0, r, sigma, T, N, M)

asian_payoffs = asian_option_payoff(S, E)
lookback_fixed_call_payoffs = lookback_fixed_call_payoff(S, E)
lookback_floating_call_payoffs = lookback_floating_call_payoff(S)
lookback_fixed_put_payoffs = lookback_fixed_put_payoff(S, E)

asian_price = np.exp(-r * T) * np.mean(asian_payoffs)
lookback_fixed_call_price = np.exp(-r * T) * np.mean(lookback_fixed_call_payoffs)
lookback_floating_call_price = np.exp(-r * T) * np.mean(lookback_floating_call_payoffs)
lookback_fixed_put_price = np.exp(-r * T) * np.mean(lookback_fixed_put_payoffs)

print(f"Asian Option Price: {asian_price:.2f}")
print(f"Lookback Fixed Strike Call Price: {lookback_fixed_call_price:.2f}")
print(f"Lookback Floating Strike Call Price: {lookback_floating_call_price:.2f}")
print(f"Lookback Fixed Strike Put Price: {lookback_fixed_put_price:.2f}")

plt.plot(S[:10].T)
plt.title(" $\sigma$=0.02")
plt.xlabel("Time Steps (days)")
plt.ylabel("Stock Price")
plt.show()
              import numpy as np
import matplotlib.pyplot as plt

def simulate_stock_price(S0, r, sigma, T, N, M):
    dt = T / N  
    S = np.zeros((M, N+1))  
    S[:, 0] = S0  
    for t in range(1, N+1):
        Z = np.random.standard_normal(M)  
        S[:, t] = S[:, t-1] * np.exp((r - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * Z)
    return S
def asian_option_payoff(S, E):
    average_price = np.mean(S[:, 1:], axis=1)  
    return np.maximum(average_price - E, 0)
def lookback_fixed_call_payoff(S, E):
    max_price = np.max(S[:, 1:], axis=1)
    return np.maximum(max_price - E, 0)
def lookback_floating_call_payoff(S):
    min_price = np.min(S[:, 1:], axis=1)
    return np.maximum(S[:, -1] - min_price, 0)
def lookback_fixed_put_payoff(S, E):
    max_price = np.max(S[:, 1:], axis=1)
    return np.maximum(E - max_price, 0)
S0 = 100      
E = 100        
T = 2.0       
r = 0.05      
sigma = 0.2   
N = 504      
M = 10000     

S = simulate_stock_price(S0, r, sigma, T, N, M)

asian_payoffs = asian_option_payoff(S, E)
lookback_fixed_call_payoffs = lookback_fixed_call_payoff(S, E)
lookback_floating_call_payoffs = lookback_floating_call_payoff(S)
lookback_fixed_put_payoffs = lookback_fixed_put_payoff(S, E)

asian_price = np.exp(-r * T) * np.mean(asian_payoffs)
lookback_fixed_call_price = np.exp(-r * T) * np.mean(lookback_fixed_call_payoffs)
lookback_floating_call_price = np.exp(-r * T) * np.mean(lookback_floating_call_payoffs)
lookback_fixed_put_price = np.exp(-r * T) * np.mean(lookback_fixed_put_payoffs)

print(f"Asian Option Price: {asian_price:.2f}")
print(f"Lookback Fixed Strike Call Price: {lookback_fixed_call_price:.2f}")
print(f"Lookback Floating Strike Call Price: {lookback_floating_call_price:.2f}")
print(f"Lookback Fixed Strike Put Price: {lookback_fixed_put_price:.2f}")

plt.plot(S[:10].T)
plt.title("T=2")
plt.xlabel("Time Steps (days)")
plt.ylabel("Stock Price")
plt.show()
              import numpy as np
import matplotlib.pyplot as plt

def simulate_stock_price(S0, r, sigma, T, N, M):
    dt = T / N  
    S = np.zeros((M, N+1))  
    S[:, 0] = S0  
    for t in range(1, N+1):
        Z = np.random.standard_normal(M)  
        S[:, t] = S[:, t-1] * np.exp((r - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * Z)
    return S
def asian_option_payoff(S, E):
    average_price = np.mean(S[:, 1:], axis=1)  
    return np.maximum(average_price - E, 0)
def lookback_fixed_call_payoff(S, E):
    max_price = np.max(S[:, 1:], axis=1)
    return np.maximum(max_price - E, 0)
def lookback_floating_call_payoff(S):
    min_price = np.min(S[:, 1:], axis=1)
    return np.maximum(S[:, -1] - min_price, 0)
def lookback_fixed_put_payoff(S, E):
    max_price = np.max(S[:, 1:], axis=1)
    return np.maximum(E - max_price, 0)
S0 = 100      
E = 100        
T = 1.0       
r = 0.00      
sigma = 0.2   
N = 252      
M = 10000     

S = simulate_stock_price(S0, r, sigma, T, N, M)

asian_payoffs = asian_option_payoff(S, E)
lookback_fixed_call_payoffs = lookback_fixed_call_payoff(S, E)
lookback_floating_call_payoffs = lookback_floating_call_payoff(S)
lookback_fixed_put_payoffs = lookback_fixed_put_payoff(S, E)

asian_price = np.exp(-r * T) * np.mean(asian_payoffs)
lookback_fixed_call_price = np.exp(-r * T) * np.mean(lookback_fixed_call_payoffs)
lookback_floating_call_price = np.exp(-r * T) * np.mean(lookback_floating_call_payoffs)
lookback_fixed_put_price = np.exp(-r * T) * np.mean(lookback_fixed_put_payoffs)

print(f"Asian Option Price: {asian_price:.2f}")
print(f"Lookback Fixed Strike Call Price: {lookback_fixed_call_price:.2f}")
print(f"Lookback Floating Strike Call Price: {lookback_floating_call_price:.2f}")
print(f"Lookback Fixed Strike Put Price: {lookback_fixed_put_price:.2f}")

plt.plot(S[:10].T)
plt.title("r=0")
plt.xlabel("Time Steps (days)")
plt.ylabel("Stock Price")
plt.show()
